version: 2.1

parameters:
  k8_app_name:
    type: string
    default: odin-platform-mobile
  aws_resource_name_prefix:
    type: string
    default: odin-platform-mobile

jobs:
  configure_aws_cli:
    executor: aws-cli/default
    steps:
      -   aws-cli/setup:
            profile-name: $AWS_PROFILE_NAME
  build_and_push_image:
    #    resource_class: large
    docker:
      -   image: docker:18.06.1-ce-git
          # environment variables available for entrypoint/command run by docker container
          environment:
            NPM_TOKEN: $NPM_TOKEN
    environment:
      AWS_RESOURCE_NAME_PREFIX: << pipeline.parameters.aws_resource_name_prefix >>
    steps:
      - checkout
      - setup_remote_docker
      -   run:
            name: Install dependencies
            command: |
              apk add py-pip
              pip install awscli
      -   run:
            name: Login to AWS ECR
            command: |
              # Login to AWS ECR
              echo "Logging in to AWS ECR..."
              $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      -   run:
            name: Build docker image
            command: |
              # Build and tag the image

              touch .env
              echo "REACT_APP_ODIN_API_URL=${REACT_APP_ODIN_API_URL}" >> .env
              cat .env

              # Build the image
              docker build -t $AWS_RESOURCE_NAME_PREFIX:$CIRCLE_SHA1 --build-arg NPM_TOKEN=$NPM_TOKEN .
              docker tag $AWS_RESOURCE_NAME_PREFIX:$CIRCLE_SHA1 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_RESOURCE_NAME_PREFIX:$CIRCLE_SHA1
            no_output_timeout: 60m
      -   run:
            name: Push docker image to ECR
            command: |
              # Push image to AWS ECR
              echo "Pushing docker image"
              docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_RESOURCE_NAME_PREFIX:$CIRCLE_SHA1
  update_eks_deployment:
    executor: aws-eks/python3
    environment:
      K8_APP_NAME: << pipeline.parameters.k8_app_name >>
      AWS_RESOURCE_NAME_PREFIX: << pipeline.parameters.aws_resource_name_prefix >>
    steps:
      - kubernetes/install
      -   aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: $K8_CLUSTER_NAME
            install-kubectl: true
      - checkout
      -   run:
            name: Update kuberenetes container image
            command: |
              # Update kuberenetes deployment
              echo "deploy to kubernetes"

              echo $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_RESOURCE_NAME_PREFIX:$CIRCLE_SHA1

              kubectl config set-context --current --namespace=$K8_CLUSTER_NAMESPACE

              kubectl get services

              kubectl get deployments

              kubectl config current-context

              kubectl set image deployment/$K8_APP_NAME $K8_APP_NAME=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_RESOURCE_NAME_PREFIX:$CIRCLE_SHA1 --record=true

              # Future update to build out
#              export NAME=my-test-nginx
#              envsubst < deployment.yaml | kubectl apply -f -

orbs:
  node: circleci/node@1.1.6
  aws-ecr: circleci/aws-ecr@6.7.0
  aws-cli: circleci/aws-cli@0.1.20
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      -   configure_aws_cli:
            name: OdinSandboxAwsCli
            context: sandbox
            filters:
              branches:
                only: staging
      -   build_and_push_image:
            name: OdinSandboxBuildAndPush
            context: sandbox
            requires:
              - OdinSandboxAwsCli
            filters:
              branches:
                only: staging
      -   update_eks_deployment:
            name: OdinSandboxEksDeployment
            context: sandbox
            filters:
              branches:
                only: staging
            requires:
              - OdinSandboxAwsCli
              - OdinSandboxBuildAndPush
      -   configure_aws_cli:
            name: YfOdinProdAwsCli
            context: yf_production
            filters:
              branches:
                only: master
      -   build_and_push_image:
            name: YfOdinProdBuildAndPush
            context: yf_production
            requires:
              - YfOdinProdAwsCli
            filters:
              branches:
                only: master
      -   update_eks_deployment:
            name: YfOdinProdEksDeployment
            context: yf_production
            filters:
              branches:
                only: master
            requires:
              - YfOdinProdAwsCli
              - YfOdinProdBuildAndPush

